import{_ as s,c as n,o as a,N as e}from"./chunks/framework.74d38e29.js";const y=JSON.parse('{"title":"联合类型 & 类型别名","description":"","frontmatter":{},"headers":[],"relativePath":"pages/typescript/union-types&type-aliases.md","lastUpdated":1681118086000}'),p={name:"pages/typescript/union-types&type-aliases.md"},l=e(`<h1 id="联合类型-类型别名" tabindex="-1">联合类型 &amp; 类型别名 <a class="header-anchor" href="#联合类型-类型别名" aria-label="Permalink to &quot;联合类型 &amp; 类型别名&quot;">​</a></h1><p>联合类型是指取值可以为多种类型中的一种，而类型别名常用于联合类型。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 联合类型</span></span>
<span class="line"><span style="color:#A6ACCD;">let myFavoriteNumber: string | number</span></span>
<span class="line"><span style="color:#A6ACCD;">myFavoriteNumber = &#39;six&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">myFavoriteNumber = 6</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 类型别名</span></span>
<span class="line"><span style="color:#A6ACCD;">type FavoriteNumber = string | number</span></span>
<span class="line"><span style="color:#A6ACCD;">let myFavoriteNumber: FavoriteNumber</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在联合类型中非公有的属性、方法，不能直接使用</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function getLength(something: string | number): number {</span></span>
<span class="line"><span style="color:#A6ACCD;">  return something.length</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &#39;string | number&#39;.</span></span>
<span class="line"><span style="color:#A6ACCD;">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上例中，length 不是 string 和 number 的共有属性，所以会报错。<br> 实际的开发过程中，我们可以通过类型窄化来处理。</p>`,6),r=[l];function t(i,o,c,m,b,u){return a(),n("div",null,r)}const C=s(p,[["render",t]]);export{y as __pageData,C as default};
