import{_ as s,c as a,o as e,N as n}from"./chunks/framework.74d38e29.js";const h=JSON.parse('{"title":"关于git提交规范","description":"","frontmatter":{},"headers":[],"relativePath":"pages/git/git-commit-specification.md","lastUpdated":1681118086000}'),l={name:"pages/git/git-commit-specification.md"},t=n(`<h1 id="关于git提交规范" tabindex="-1">关于git提交规范 <a class="header-anchor" href="#关于git提交规范" aria-label="Permalink to &quot;关于git提交规范&quot;">​</a></h1><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 空一行</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 空一行</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;footer&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><h2 id="type用于说明commit的类别" tabindex="-1">type用于说明commit的类别 <a class="header-anchor" href="#type用于说明commit的类别" aria-label="Permalink to &quot;type用于说明commit的类别&quot;">​</a></h2><ul><li>feat：添加新功能。</li><li>fix：修复 bug。</li><li>docs：文档相关。</li><li>style：样式相关。</li><li>refactor：代码重构，一般如果不是其他类型的 commit，都可以归为重构。</li><li>pref：性能相关。</li><li>test：测试相关。</li><li>build：影响项目构建或依赖项修改</li><li>chore：构建配置相关。</li><li>revert：分支回溯。</li></ul><h2 id="scope用于说明-commit-影响的范围-比如数据层、控制层、视图层等等-视项目不同而不同。" tabindex="-1">scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。 <a class="header-anchor" href="#scope用于说明-commit-影响的范围-比如数据层、控制层、视图层等等-视项目不同而不同。" aria-label="Permalink to &quot;scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。&quot;">​</a></h2><h2 id="subject是-commit-目的的简短描述-不超过50个字符" tabindex="-1">subject是 commit 目的的简短描述，不超过50个字符 <a class="header-anchor" href="#subject是-commit-目的的简短描述-不超过50个字符" aria-label="Permalink to &quot;subject是 commit 目的的简短描述，不超过50个字符&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit -m &quot;fix(auto-complete): 修复类型定义报错问题&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="body-和-footer日常开发忽略" tabindex="-1">Body 和 Footer日常开发忽略 <a class="header-anchor" href="#body-和-footer日常开发忽略" aria-label="Permalink to &quot;Body 和 Footer日常开发忽略&quot;">​</a></h2><h2 id="总的规则设置" tabindex="-1">总的规则设置 <a class="header-anchor" href="#总的规则设置" aria-label="Permalink to &quot;总的规则设置&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const types = [&#39;feat&#39;, &#39;fix&#39;, &#39;docs&#39;, &#39;style&#39;, &#39;refactor&#39;, &#39;perf&#39;, &#39;test&#39;, &#39;build&#39;, &#39;chore&#39;, &#39;revert&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">module.exports = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  extends: [&#39;@commitlint/config-conventional&#39;],</span></span>
<span class="line"><span style="color:#A6ACCD;">  rules: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;type-empty&#39;: [2, &#39;never&#39;],</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;type-enum&#39;: [2, &#39;always&#39;, types],</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;scope-case&#39;: [0, &#39;always&#39;],</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;subject-empty&#39;: [2, &#39;never&#39;],</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;subject-case&#39;: [0, &#39;never&#39;],</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;header-max-length&#39;: [2, &#39;always&#39;, 88],</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="关于日志" tabindex="-1">关于日志 <a class="header-anchor" href="#关于日志" aria-label="Permalink to &quot;关于日志&quot;">​</a></h2><p>后期会考虑集成自动生成提交日志</p>`,14),p=[t];function i(o,r,c,m,d,b){return e(),a("div",null,p)}const y=s(l,[["render",i]]);export{h as __pageData,y as default};
