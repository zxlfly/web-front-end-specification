import{_ as s,c as a,o as n,N as e}from"./chunks/framework.74d38e29.js";const b=JSON.parse('{"title":"类型的窄化","description":"","frontmatter":{},"headers":[],"relativePath":"pages/typescript/type-narrowing.md","lastUpdated":1681118086000}'),p={name:"pages/typescript/type-narrowing.md"},l=e(`<h1 id="类型的窄化" tabindex="-1">类型的窄化 <a class="header-anchor" href="#类型的窄化" aria-label="Permalink to &quot;类型的窄化&quot;">​</a></h1><p>ts的类型是可以组合使用的。这样就需要在程序中判断当前值类型进行区分操作。<br> 类型窄化根据类型守卫在子语句块重新定义了具体的新类型。<br> 例如使用typeof判断，需要注意null。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">type Fish = {swim:()=&gt;void}</span></span>
<span class="line"><span style="color:#A6ACCD;">type Bird = {fly:()=&gt;void}</span></span>
<span class="line"><span style="color:#A6ACCD;">function move(animal:Fish|Bird){</span></span>
<span class="line"><span style="color:#A6ACCD;">  if(&#39;swim&#39; in animal){</span></span>
<span class="line"><span style="color:#A6ACCD;">    return animal.swim()</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  return animal.fly()</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,3),r=[l];function t(i,o,c,d,m,_){return n(),a("div",null,r)}const y=s(p,[["render",t]]);export{b as __pageData,y as default};
