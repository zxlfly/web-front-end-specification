import{_ as e,c as o,o as a,N as s}from"./chunks/framework.74d38e29.js";const _=JSON.parse('{"title":"命名规范","description":"","frontmatter":{},"headers":[],"relativePath":"pages/ts-practice-in-vue/naming-convention.md","lastUpdated":1681118086000}'),n={name:"pages/ts-practice-in-vue/naming-convention.md"},t=s('<h1 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h1><h2 id="_1-1-1-项目命名" tabindex="-1">1.1.1 项目命名 <a class="header-anchor" href="#_1-1-1-项目命名" aria-label="Permalink to &quot;1.1.1 项目命名&quot;">​</a></h2><p>全部采用小写方式，以中线分隔。 <strong>正例</strong>：<code>mall-management-system</code><br><strong>反例</strong>：<code>mall_management-system / mallManagementSystem</code></p><h2 id="_1-1-2-目录命名" tabindex="-1">1.1.2 目录命名 <a class="header-anchor" href="#_1-1-2-目录命名" aria-label="Permalink to &quot;1.1.2 目录命名&quot;">​</a></h2><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数。<br><strong>正例</strong>：<code>scripts/styles/components/images/utils/layouts/demo-styles/demo-scripts/img/doc</code><br><strong>反例</strong>：<code>script/style/demo_scripts/demoStyles/imgs/docs</code></p><p>【特殊】VUE 的项目中的 components 中的组件目录，使用 PascalCase命名。组件name也采用PascalCase命名。<br><strong>正例</strong>：<code>HeadSearch/PageLoading</code><br><strong>反例</strong>：<code>head-search/page-loading/authorized/notice-icon</code></p><p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case命名。<br><strong>正例</strong>：<code>page-one/shopping-car/user-management</code><br><strong>反例</strong>：<code>ShoppingCar/UserManagement</code></p><h2 id="_1-1-3-js、css、scss、html、png-文件命名" tabindex="-1">1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名 <a class="header-anchor" href="#_1-1-3-js、css、scss、html、png-文件命名" aria-label="Permalink to &quot;1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名&quot;">​</a></h2><p>全部采用小写方式， 以中划线分隔。<br><strong>正例</strong>：<code>render-dom.js/signup.css/index.html/company-logo.png</code><br><strong>反例</strong>：<code>renderDom.js/UserManagement.html</code></p><h2 id="_1-1-4-命名严谨性" tabindex="-1">1.1.4 命名严谨性 <a class="header-anchor" href="#_1-1-4-命名严谨性" aria-label="Permalink to &quot;1.1.4 命名严谨性&quot;">​</a></h2><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br> 说明：正确的 英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用<br><strong>正例</strong>：<code>henan/luoyang/rmb 等国际通用的名称，可视同英文</code><br><strong>反例</strong>：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code><br> 杜绝完全不规范的缩写，避免望文不知义：<br><strong>反例</strong>：<code>AbstractClass</code>“缩写”命名成 <code>AbsClass；condition</code> “缩写”命名成 <code>condi</code>，此类随意缩写严重 降低了代码的可阅读性。</p>',11),r=[t];function c(d,i,g,l,m,p){return a(),o("div",null,r)}const b=e(n,[["render",c]]);export{_ as __pageData,b as default};
