import{_ as s,c as n,o as a,N as e}from"./chunks/framework.74d38e29.js";const C=JSON.parse('{"title":"数组","description":"","frontmatter":{},"headers":[],"relativePath":"pages/typescript/array.md","lastUpdated":1681118086000}'),l={name:"pages/typescript/array.md"},p=e(`<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h1><h2 id="数组类型有两种表示方式" tabindex="-1">数组类型有两种表示方式： <a class="header-anchor" href="#数组类型有两种表示方式" aria-label="Permalink to &quot;数组类型有两种表示方式：&quot;">​</a></h2><ul><li>类型 + 方括号 表示法</li><li>泛型 表示法</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// \`类型 + 方括号\` 表示法</span></span>
<span class="line"><span style="color:#A6ACCD;">let fibonacci: number[] = [1, 1, 2, 3, 5]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 泛型表示法</span></span>
<span class="line"><span style="color:#A6ACCD;">let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="如果是类数组-则不可以用数组的方式定义类型-因为它不是真的数组-需要用-interface-进行定义" tabindex="-1">如果是类数组，则不可以用数组的方式定义类型，因为它不是真的数组，需要用 interface 进行定义 <a class="header-anchor" href="#如果是类数组-则不可以用数组的方式定义类型-因为它不是真的数组-需要用-interface-进行定义" aria-label="Permalink to &quot;如果是类数组，则不可以用数组的方式定义类型，因为它不是真的数组，需要用 interface 进行定义&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">interface IArguments {</span></span>
<span class="line"><span style="color:#A6ACCD;">  [index: number]: any;</span></span>
<span class="line"><span style="color:#A6ACCD;">  length: number;</span></span>
<span class="line"><span style="color:#A6ACCD;">  callee: Function;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">function sum() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  let args: IArguments = arguments</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>IArguments 类型已在 TypeScript 中内置，类似的还有很多：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let body: HTMLElement = document.body;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">let allDiv: NodeList = document.querySelectorAll(&#39;div&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">document.addEventListener(&#39;click&#39;, function(e: MouseEvent) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Do something</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="如果数组里的元素类型并不都是相同的怎么办呢" tabindex="-1">如果数组里的元素类型并不都是相同的怎么办呢？ <a class="header-anchor" href="#如果数组里的元素类型并不都是相同的怎么办呢" aria-label="Permalink to &quot;如果数组里的元素类型并不都是相同的怎么办呢？&quot;">​</a></h2><p>这时就可以使用 any 类型了</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let list: any[] = [&#39;OpenTiny&#39;, 112, { website: &#39;https://github.com/zxlfly&#39; }];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,11),r=[p];function i(t,c,o,u,b,d){return a(),n("div",null,r)}const A=s(l,[["render",i]]);export{C as __pageData,A as default};
